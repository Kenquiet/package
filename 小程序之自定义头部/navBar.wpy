<template>
    <div>
        <view class="custom_nav" :style="{height:navbarHeight + 'px','background': navBackground}">
            <view class="custom_nav_box" :style="{height:navbarHeight + 'px','background': navBackground}">
                <view class="custom_nav_bar" :style="{top: statusBarHeight + 'px', height: cusnavH + 'px'}">
                    <!-- 搜索部分-->
                    <block wx:if="{{isSearch}}">
                        <input class="navSearch"
                            style="height:{{navbarBtn.height-2}}px;line-height:{{navbarBtn.height-4}}px; top:{{navbarBtn.top+1}}px; left:{{navbarBtn.right}}px; border-radius:{{navbarBtn.height/2}}px;"
                            maxlength="10" bindinput="bindKeyInput" placeholder="输入文字搜索" />
                    </block>
                    <!-- HOME 部分-->
                    <block wx:else>
                        <!-- <view class="custom_nav_icon {{!haveBack||'borderLine'}}"
                            style="height:{{navbarBtn.height}}px;line-height:{{navbarBtn.height-2}}px; top:{{navbarBtn.top}}px; left:{{navbarBtn.right}}px; border-radius:{{navbarBtn.height/2}}px;">
                            <view wx:if="{{haveBack}}" class="icon-back" bindtap="_goBack">
                                <image src="./back.png" class="back-pre"/>
                            </view>
                            <view wx:if="{{haveBack}}" class="navbar-v-line"></view>
                            <view class="icon-home">
                                <navigator class="home_a" url="/views/index" open-type="switchTab">
                                    <image src="./Home.png" class="back-home"/>
                                </navigator>
                            </view>
                        </view> -->
                        <view class="nav_title" :style="{color: navTitleColor,height: cusnavH + 'px','line-height': cusnavH + 'px'}">
                            {{title}}
                        </view>
                    </block>
                </view>
            </view>
        </view>
    </div>
</template>

<script>
import App from '@wepy/core';

/**
 * 不了解这个框架的，同样vue 里面的所对应的变量和函数钩子，只不过是将data 改成一个函数
 * 小程序的原生可以参考: https://developers.weixin.qq.com/community/develop/article/doc/000ea626d2cc08ba7a59e19d35a013
 * 有些是需要改进的，按实际情况来，bug 是不可控的，只能减少
 */

App.component({
    store: App.$store,

    options: App.CONFIG.OPTIONS,

    props: {
        title: { // 外部传进来的title
            type: String,
            value: ""
        },
        isSearch: { // 是否是搜索框
            type: Boolean,
            default: false
        },
        navBackground: { // 自定义背景的颜色
            type: String,
            value: '#fff'
        },
        navTitleColor: { // 使用自定义字体颜色
            type: String,
            value: '#000'
        },
    },

    data: {
        haveBack: true, // 是否有返回按钮，true 有，false 没有
        statusBarHeight: 0, // 状态栏高度
        navbarHeight: 0, //顶部导航栏高度
        navbarBtn: { // 胶囊位置
            height: 0,
            width: 0,
            top: 0,
            bottom: 0,
            right: 0,
        },
        cusnavH: 0, // title 高度

        // 一下的几个最好放在全局变量,我是放在全局的,只不过现在放到 github 提到这里了而已
        SystemInfo: null,
        HEADER_BTM_POSI: null,
        NAV_HEIGHT: null,
    },
    onShow() {

    },

    /**
     * 1. SystemInfo 保存 获取到的系统信息，可以放在全局变量里面，是最好的
     * 2. HEADER_BTM_POSI 右上角胶囊按键的信息(包过top,bottom 等信息),可以放在全局变量里面，是最好的
     * 3. 胶囊的详细信息说明见：https://developers.weixin.qq.com/miniprogram/dev/api/ui/menu/wx.getMenuButtonBoundingClientRect.html
     * 4. NAV_HEIGHT 保存的是实际我们需要的高度，将这个反馈给父组件，这个自定义的头部占了多少位置，同样最好保存在全局变量
     */
    created() {
        if(!SystemInfo) {
            SystemInfo = wx.getSystemInfoSync();
        }
        // 微信7.0.0支持wx.getMenuButtonBoundingClientRect()获得胶囊按钮高度
        if(!HEADER_BTM_POSI){
            HEADER_BTM_POSI = wx.getMenuButtonBoundingClientRect()
        }

        let statusBarHeight = SystemInfo.statusBarHeight; // 获取状态栏高度
        
        let headerPosi = HEADER_BTM_POSI; // 获取胶囊信息

        // 胶囊bottom - 胶囊height - 状态栏height （胶囊实际bottom 为距离导航栏底部的高度）
        let btmPosiBottom = HEADER_BTM_POSI.bottom - HEADER_BTM_POSI.height - statusBarHeight;

        // 胶囊top - 状态栏高度
        let btmPosiTop = HEADER_BTM_POSI.top - statusBarHeight; 

        let btmPosi = {
            height: HEADER_BTM_POSI.height,
            width: HEADER_BTM_POSI.width,

            // 这里做判断的主要作用是为了有些减出来的数为零，胶囊里面的top 就是我们需要的 top 也就是胶囊距离状态栏的高度
            top: btmPosiTop >= 0 ? btmPosiTop : HEADER_BTM_POSI.top,
            bottom: btmPosiBottom >= 0 ? btmPosiBottom : HEADER_BTM_POSI.bottom - HEADER_BTM_POSI.height ,

            // 这里不能获取 屏幕宽度，PC端打开小程序会有BUG，要获取窗口高度 - 胶囊right
            right: SystemInfo.windowWidth - HEADER_BTM_POSI.right,
        }
    
        let haveBack;
        // 当只有一个页面时，并且是从分享页进入
        if (getCurrentPages().length != 1) { 
            haveBack = false;
        } else {
            haveBack = true;
        }
        
        // 框的高度 = 胶囊的高度 + 胶囊距离状态栏的高度 + 胶囊底部的高度
        let cusnavH = btmPosi.height + btmPosi.top + btmPosi.bottom
        
        this.haveBack = haveBack;
        this.statusBarHeight = statusBarHeight;
        this.navbarBtn = btmPosi;
        this.cusnavH = cusnavH;

        // // 将实际的nav 高度传给父类页面
        // this.$emit('commonNavAttr',{
        //     height: headerPosi.bottom + btmPosi.bottom
        // })

        //  本来是想传给父组件的，结果父组件接不到，可能是这个框架的原因吧，所以我存到了全局变量里面了
        //  这里的判断也是因为有些机型减出来的数为负数，那么这些机型得重新计算
        if(btmPosiBottom < 0 || btmPosiTop < 0) {
            NAV_HEIGHT = cusnavH + statusBarHeight // 状态栏的高度 + title 的高度
            this.navbarHeight = cusnavH + statusBarHeight
        }else{
            NAV_HEIGHT = headerPosi.bottom + btmPosi.bottom
            this.navbarHeight = headerPosi.bottom + btmPosi.bottom // 胶囊bottom + 胶囊实际bottom
        }
    },

    methods: {

        // 返回上一层
        _goBack() {
            wx.navigateBack({
                delta: 1
            });
        },

        bindKeyInput(e) {
            console.log(e)
        }

    }
})
</script>

<style scoped>
/* components/nav/test.wxss */
.custom_nav {
    width: 100%;
    background: #fff;
    position: relative;
    z-index: 99999;
}
.custom_nav_box {
    position: fixed;
    width: 100%;
    background: #fff;
    z-index: 99999;
    border-bottom: 1rpx solid rgba(255, 255, 255, 0.3);
}
.custom_nav_bar {
    position: relative;
    z-index: 9;
}
.nav_title {
    font-size: 28rpx;
    color: #000;
    text-align: center;
    position: absolute;
    max-width: 360rpx;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    z-index: 1;
}
.custom_nav_box .custom_nav_icon {
    position:absolute;
    z-index: 2;
    display: inline-block;
    border-radius: 50%;
    vertical-align: top;
    font-size:0;
    box-sizing: border-box;
}
.custom_nav_box .custom_nav_icon.borderLine {
    border: 1rpx solid rgba(255, 255, 255, 0.3);
    background: rgba(0, 0, 0, 0.1);
}
.navbar-v-line {
    width: 1px;
    margin-top: 14rpx;
    height: 32rpx;
    background-color: rgba(255, 255, 255, 0.3);
    display: inline-block;
    vertical-align: top;
}
.icon-back {
    display: inline-block;
    width: 74rpx;
    padding-left: 20rpx;
    vertical-align: top;
    /* margin-top: 12rpx;
    vertical-align: top; */
    height: 100%;
}
.icon-home {
    /* margin-top: 8rpx;
    vertical-align: top; */
    display: inline-block;
    width: 80rpx;
    text-align: center;
    vertical-align: top;
    height: 100%;
}
.icon-home .home_a {
    height: 100%;
    display: inline-block;
    vertical-align: top;
    width: 35rpx;
}
.custom_nav_box .back-pre,
.custom_nav_box .back-home {
    width: 35rpx;
    height: 35rpx;
    vertical-align: middle;
}
.navSearch {
  width: 200px;
  background: #fff;
  font-size: 14px;
  position: absolute;
  padding: 0 20rpx;
  z-index: 9;
}
</style>
